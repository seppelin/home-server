package views

import (
	"fmt"
	"home-server/services"
	"time"
	"strconv"
)

var AREA_NAMES = [services.AREA_COUNT]string{"Rasen", "Blumen", "Beet"}
var DAY_NAMES = [7]string{"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}

func fmtHHMM(dur time.Duration) string {
	return fmt.Sprintf("%02d:%02d", int(dur.Hours())%60, int(dur.Minutes())%60)
}

func fmtAutoOff(autoOff time.Duration, start time.Time) string {
	dur := autoOff - time.Since(start)
	return strconv.Itoa(int(dur.Milliseconds()))
}

func fmtKind(kind services.ChangeKind, id int) (f string) {
	switch kind{
	case services.NewDay:
		f = "Neuer Tag"
	case services.AutoOff:
		f = "Auto aus"
	case services.IntervalOn:
		f = fmt.Sprint("Intervall-", id, " an")
	case services.IntervalOff:
		f = fmt.Sprint("Intervall-", id, " aus")
	}
	return
}

templ State(state services.WateringState) {
	<div id="w-state" sse-swap="w-state" hx-swap="outerHTML">
		<strong>Aktuell: </strong>
		for i, area := range state.Areas {
			if area {
				{ AREA_NAMES[i] }, 
			}
		}
		 - <strong>Next: </strong>
		{ fmtKind(state.Kind, state.IntervalID) }
		in <time id="w-change">{ strconv.Itoa(int(state.Change.Milliseconds())) }</time>
		<script>
			startCountDown("w-change");
		</script>
	</div>
}

templ Watering(wm services.WateringManual, wis []services.WateringInterval, state services.WateringState) {
	<div id="main" hx-ext="sse" sse-connect="/watering/updates">
		<h2>Bewässerung</h2>
		@State(state)
		<div>
			@WateringManual(wm)
		</div>
		<hr/>
		<button hx-post="/watering/interval" hx-target="#w-intervals" hx-swap="afterbegin">
			Neues Intervall
		</button>
		<div id="w-intervals" sse-swap="w-intervals" hx-swap="afterbegin">
			for _, wi := range wis {
				@WateringInterval(wi)
			}
		</div>
	</div>
}

templ WateringManual(wm services.WateringManual) {
	<div
		sse-swap="w-manual"
		hx-swap="outerHTML"
		id="w-manual"
		class={ "box", templ.KV("on", wm.On) }
	>
		<strong>Manuell </strong>
		if wm.On {
			An
		} else {
			Aus
		}
		<br/>
		for i, area := range wm.Areas {
			if area {
				{ AREA_NAMES[i] }, 
			}
		}
		<br/>
		Auto aus: <time>{ fmtHHMM(wm.AutoOff) }</time>
		if wm.On && wm.AutoOff != 0 {
			- Aus in:<time id="w-manual-time">{ fmtAutoOff(wm.AutoOff, wm.Start) }</time>
			<script>
				startCountDown("w-manual-time");
			</script>
		}
		<br/>
		<button
			hx-get="/watering/manual/form"
			hx-target="#w-manual"
			hx-swap="outerHTML"
		>
			Ändern
		</button>
	</div>
}

templ WateringManualForm(wm services.WateringManual) {
	<form
		id="w-manual-form"
		class="box"
		hx-put="/watering/manual"
		hx-swap="outerHTML"
		sse-swap="w-manual"
	>
		<strong>Manuell </strong>
		<label>
			An<input name="on" type="checkbox" checked?={ wm.On }/>
		</label>
		<br/>
		for i, area := range wm.Areas {
			{ AREA_NAMES[i] }<input name={ AREA_NAMES[i] } type="checkbox" ch checked?={ area }/>, 
		}
		<br/>
		<label>
			AutoAus
			<input name="auto-off" type="time" value={ fmtHHMM(wm.AutoOff) }/>
		</label>
		<br/>
		<button class="success" type="submit">Bestätigen</button>
		<button
			class="info"
			hx-get="/watering/manual"
			hx-target="#w-manual-form"
			hx-swap="outerHTML"
		>Verwerfen</button>
	</form>
}

templ WateringInterval(wi services.WateringInterval) {
	<div
		sse-swap={ fmt.Sprintf("w-interval-%d", wi.Id) }
		hx-swap="outerHTML"
		id={ fmt.Sprintf("w-interval-%d", wi.Id) }
		if wi.On {
			class="box on"
		} else {
			class="box"
		}
	>
		<strong>Intervall</strong>-{strconv.Itoa(wi.Id)}
		if wi.On {
			An
		} else {
			Aus
		}
		<br/>
		for i, area := range wi.Areas {
			if area {
				{ AREA_NAMES[i] }, 
			}
		}
		<br/>
		for i, day := range wi.Days {
			if day {
				{ DAY_NAMES[i] }, 
			}
		}
		<br/>
		Start: <time>{ fmtHHMM(wi.Start) }</time>, Dauer: <time>{ fmtHHMM(wi.Duration) }</time>
		<br/>
		<button
			hx-get={ fmt.Sprintf("/watering/interval/form/%d", wi.Id) }
			hx-target={ fmt.Sprintf("#w-interval-%d", wi.Id) }
			hx-swap="outerHTML"
		>
			Ändern
		</button>
	</div>
}

templ WateringIntervalForm(wi services.WateringInterval) {
	<form
		id={ fmt.Sprintf("w-interval-form-%d", wi.Id) }
		class="box"
		hx-put={ fmt.Sprintf("/watering/interval/%d", wi.Id) }
		hx-swap="outerHTML"
		sse-swap={ fmt.Sprintf("w-interval-%d", wi.Id) }
	>
		<strong>Intervall</strong>-{strconv.Itoa(wi.Id)}
		<label>
			An<input name="on" type="checkbox" checked?={ wi.On }/>
		</label>
		<br/>
		for i, area := range wi.Areas {
			<label>
				{ AREA_NAMES[i] }<input name={ AREA_NAMES[i] } type="checkbox" checked?={ area }/>, 
			</label>
		}
		<br/>
		for i, day := range wi.Days {
			<label>
				{ DAY_NAMES[i] }<input name={ DAY_NAMES[i] } type="checkbox" checked?={ day }/>, 
			</label>
		}
		<br/>
		<label>
			Start
			<input name="start" type="time" value={ fmtHHMM(wi.Start) }/>
		</label>
		<br/>
		<label>
			Dauer
			<input name="duration" type="time" value={ fmtHHMM(wi.Duration) }/>
		</label>
		<br/>
		<button class="success" type="submit">Bestätigen</button>
		<button
			class="info"
			hx-get={ fmt.Sprintf("/watering/interval/%d", wi.Id) }
			hx-target={ fmt.Sprintf("#w-interval-form-%d", wi.Id) }
			hx-swap="outerHTML"
		>Verwerfen</button>
		<button
			class="danger"
			hx-delete={ fmt.Sprintf("/watering/interval/%d", wi.Id) }
			hx-target={ fmt.Sprintf("#w-interval-form-%d", wi.Id) }
			hx-swap="outerHTML"
		>Löschen</button>
	</form>
}
